}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=100,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
Out
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(200,400,600,800))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out
debugSource('~/firstP/code/testLevel.R', echo=TRUE)
tempOracleStat
temp
X1
V1
t(V1)%*%V1
str(V1)
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
V1
debugSource('~/firstP/code/testLevel.R', echo=TRUE)
str(V1)
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
Out
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doUneqTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
Out
source('~/firstP/code/testLevel.R', echo=TRUE)
source('~/firstP/code/testLevel.R', echo=TRUE)
debugSource('~/firstP/code/testLevel.R', echo=TRUE)
myV1
myV
source("./stat.R")
library(ggplot2)
library(xtable)
doUneqTest <- function(X1, X2, n1, n2, p, rmax = 10) {
S1 <- var(X1)
S2 <- var(X2)
myEigen=eigen(S1,symmetric = TRUE)
theTemp=myEigen$values[1:(n1-2)]/myEigen$values[2:(n1-1)]
myRhat1=which.max(theTemp[1:rmax])
myV1=myEigen$vectors[,(1:myRhat1)]
myEigen=eigen(S2,symmetric = TRUE)
theTemp=myEigen$values[1:(n2-2)]/myEigen$values[2:(n2-1)]
myRhat2=which.max(theTemp[1:rmax])
myV2 <- myEigen$vectors[,(1:myRhat2)]
myV <- svd(cbind(myV1,myV2))$u
myTildeV <- Null(myV)
trace1=sum(eigen(S1,symmetric = TRUE)$values[(myRhat1+1):p])
trace2=sum(eigen(S2,symmetric = TRUE)$values[(myRhat2+1):p])
# variance estimator
sigmaSqEst <- 2*(p-myRhat1-myRhat2)*(
(trace1/(p-myRhat1))^2/n1/(n1-1)+
(trace2/(p-myRhat2))^2/n2/(n2-1)+
2*(trace1/(p-myRhat1))*(trace2/(p-myRhat2))/n1/n2
)
stat <- sum((t(myTildeV)%*%(colMeans(X1)- colMeans(X2)))^2)-trace1/n1-trace2/n2
studentStat <- stat/sqrt(sigmaSqEst)
return(pnorm(studentStat,0,1,lower.tail = FALSE))
}
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doUneqTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,40,60,80))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
Out
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=50,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator1(n2)
myPvalue[i]=doUneqTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V1),X2%*%Null(V1),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(200,400,600,800))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out
Out=Out[,-2]
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp3=Out[Out$beta==2,]
TTT1=merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT2=TTT2[,-c(3,4,7,10)]
names(TTT2)=c("n","p","myLevelbeta0.5","oracleLevelbeta0.5","myLevelbeta1","oracleLevelbeta1","myLevelbeta2","oracleLevelbeta2")
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrccccccc"
print(myTable1,file="level.tex",include.rownames=FALSE)
Out
myTable1
TTT2
TTT1
TTT2
Temp3
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=1000,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator2(n2)
myPvalue[i]=doUneqTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
V <- svd(V1,V2)$u
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(200,400,600,800))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
write.csv(Out,"level.csv",row.names = FALSE)
Out=Out[,-2]
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp3=Out[Out$beta==2,]
TTT1=merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT2=TTT2[,-c(3,4,7,10)]
names(TTT2)=c("n","p","myLevelbeta0.5","oracleLevelbeta0.5","myLevelbeta1","oracleLevelbeta1","myLevelbeta2","oracleLevelbeta2")
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrccccccc"
print(myTable1,file="level2.tex",include.rownames=FALSE)
# myTable1=xtable(Out[1:15,],digits=c(0,0,0,0,0,0,3),caption="Test level simulation",label="biaoge1")
# align(myTable1) <- "|r|rrrrr|r|"
# print(myTable1,file="level1.tex",include.rownames=FALSE)
debugSource('~/firstP/code/testLevel.R', echo=TRUE)
source('~/firstP/code/testLevel.R', echo=TRUE)
Out
