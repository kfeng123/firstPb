Out=rbind(Out,temp)
}
Out
Out=Out[,-2]
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp3=Out[Out$beta==2,]
TTT1=merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT2=TTT2[,-c(3,4,7,10)]
names(TTT2)=c("n","p","myLevelbeta0.5","oracleLevelbeta0.5","myLevelbeta1","oracleLevelbeta1","myLevelbeta2","oracleLevelbeta2")
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrccccccc"
print(myTable1,file="level.tex",include.rownames=FALSE)
Out
myTable1
TTT2
TTT1
TTT2
Temp3
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=1000,rmax=10){
theEig1 <- rep(1,p)
if(r!=0){
theEig1[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig1)
normalModelSimulator1 <- temp$normalModelSimulator
V1 <- temp$V[,1:r]
theEig2 <- rep(1,p)
if(r!=0){
theEig2[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig2)
normalModelSimulator2 <- temp$normalModelSimulator
V2 <- temp$V[,1:r]
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=normalModelSimulator1(n1)
X2=normalModelSimulator2(n2)
myPvalue[i]=doUneqTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
V <- svd(V1,V2)$u
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(200,400,600,800))
for(n in c(300,600)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
write.csv(Out,"level.csv",row.names = FALSE)
Out=Out[,-2]
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp3=Out[Out$beta==2,]
TTT1=merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT2=TTT2[,-c(3,4,7,10)]
names(TTT2)=c("n","p","myLevelbeta0.5","oracleLevelbeta0.5","myLevelbeta1","oracleLevelbeta1","myLevelbeta2","oracleLevelbeta2")
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrccccccc"
print(myTable1,file="level2.tex",include.rownames=FALSE)
# myTable1=xtable(Out[1:15,],digits=c(0,0,0,0,0,0,3),caption="Test level simulation",label="biaoge1")
# align(myTable1) <- "|r|rrrrr|r|"
# print(myTable1,file="level1.tex",include.rownames=FALSE)
debugSource('~/firstP/code/testLevel.R', echo=TRUE)
source('~/firstP/code/testLevel.R', echo=TRUE)
Out
source("./stat.R")
library(ggplot2)
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
sri = sriStat(X1,X2,n1,n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
sriTemp <- NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
sriTemp[i] = sriStat(tempX1,tempX2,n1,n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp),
sri = sum(sriTemp > sri) / length(sriTemp)
))
}
# main simulation
myMainSimulation=function(p,n1,n2,r,beta){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V
temp1=rnorm(p,0,1)
temp2=rnorm(p,0,1)
tau=(n1+n2)/n1/n2
theoryPower=function(mu1,mu2){
sum((mu1-mu2)^2)/sqrt(2*tau^2*p)
}
outMy=NULL
outChen=NULL
outSri <- NULL
for(hh in c(0,1,2,3,4,5)){
myC=sqrt(hh*sqrt(2*tau^2*p)/sum((temp1-temp2)^2))
mu1=temp1*myC
mu2=temp2*myC
tempMy=NULL
tempChen=NULL
tempSri <- NULL
for(i in 1:500){
X1=normalModelSimulator(n=n1)+outer(rep(1,n1),mu1)
X2=normalModelSimulator(n=n2)+outer(rep(1,n2),mu2)
temp=myPermutation(X1,X2,n1,n2,B=100)
tempMy[i]=temp$my
tempChen[i]=temp$chen
tempSri[i] <- temp$sri
}
outMy=c(outMy,sum(tempMy<0.05)/length(tempMy))
outChen=c(outChen,sum(tempChen<0.05)/length(tempChen))
outSri <- c(outSri,sum(tempSri<0.05)/length(tempSri))
}
list(my=outMy,chen=outChen,sri=outSri)
}
myPlot=function(uio){
cc=seq(0,5,1)
temp1=data.frame(h=cc,Power=uio$my,Method="New")
temp2=data.frame(h=cc,Power=uio$chen,Method="CQ")
temp3=data.frame(h=cc,Power=uio$sri,Method="SD")
myD=rbind(temp1,temp2,temp3)
ggplot(data=myD,aes(x=h,y=Power,color=Method,linetype=Method))+
geom_line()+
xlab("SNR")
}
p=150
n1=45
n2=50
r=3
beta=0.5
jjj1=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig1.jpeg",width=300,height=300)
myPlot(jjj1)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig2.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig3.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=2")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=0
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig4.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=0")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=0.5
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig5.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig6.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig7.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=2")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=0
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig8.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=0")))+theme_linedraw()
dev.off()
source("./stat.R")
library(ggplot2)
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
sri = sriStat(X1,X2,n1,n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
sriTemp <- NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
sriTemp[i] = sriStat(tempX1,tempX2,n1,n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp),
sri = sum(sriTemp > sri) / length(sriTemp)
))
}
# main simulation
myMainSimulation=function(p,n1,n2,r,beta){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V
temp1=rnorm(p,0,1)
temp2=rnorm(p,0,1)
tau=(n1+n2)/n1/n2
theoryPower=function(mu1,mu2){
sum((mu1-mu2)^2)/sqrt(2*tau^2*p)
}
outMy=NULL
outChen=NULL
outSri <- NULL
for(hh in c(0,1,2,3,4,5)){
myC=sqrt(hh*sqrt(2*tau^2*p)/sum((temp1-temp2)^2))
mu1=temp1*myC
mu2=temp2*myC
tempMy=NULL
tempChen=NULL
tempSri <- NULL
for(i in 1:500){
X1=normalModelSimulator(n=n1)+outer(rep(1,n1),mu1)
X2=normalModelSimulator(n=n2)+outer(rep(1,n2),mu2)
temp=myPermutation(X1,X2,n1,n2,B=100)
tempMy[i]=temp$my
tempChen[i]=temp$chen
tempSri[i] <- temp$sri
}
outMy=c(outMy,sum(tempMy<0.05)/length(tempMy))
outChen=c(outChen,sum(tempChen<0.05)/length(tempChen))
outSri <- c(outSri,sum(tempSri<0.05)/length(tempSri))
}
list(my=outMy,chen=outChen,sri=outSri)
}
myPlot=function(uio){
cc=seq(0,5,1)
temp1=data.frame(h=cc,Power=uio$my,Method="New")
temp2=data.frame(h=cc,Power=uio$chen,Method="CQ")
temp3=data.frame(h=cc,Power=uio$sri,Method="SD")
myD=rbind(temp1,temp2,temp3)
ggplot(data=myD,aes(x=h,y=Power,color=Method,linetype=Method))+
geom_line()+
xlab("SNR")
}
p=150
n1=45
n2=50
r=3
beta=0.5
jjj1=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig1.jpeg",width=300,height=300)
myPlot(jjj1)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig2.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig3.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=2")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=0
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig4.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=0")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=0.5
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig5.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig6.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig7.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=2")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=0
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig8.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=0")))+theme_linedraw()
dev.off()
install.pakcages("ggplot2")
install.packages("ggplot2")
source("./stat.R")
library(ggplot2)
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
sri = sriStat(X1,X2,n1,n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
sriTemp <- NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
sriTemp[i] = sriStat(tempX1,tempX2,n1,n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp),
sri = sum(sriTemp > sri) / length(sriTemp)
))
}
# main simulation
myMainSimulation=function(p,n1,n2,r,beta){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V
temp1=rnorm(p,0,1)
temp2=rnorm(p,0,1)
tau=(n1+n2)/n1/n2
theoryPower=function(mu1,mu2){
sum((mu1-mu2)^2)/sqrt(2*tau^2*p)
}
outMy=NULL
outChen=NULL
outSri <- NULL
for(hh in c(0,1,2,3,4,5)){
myC=sqrt(hh*sqrt(2*tau^2*p)/sum((temp1-temp2)^2))
mu1=temp1*myC
mu2=temp2*myC
tempMy=NULL
tempChen=NULL
tempSri <- NULL
for(i in 1:500){
X1=normalModelSimulator(n=n1)+outer(rep(1,n1),mu1)
X2=normalModelSimulator(n=n2)+outer(rep(1,n2),mu2)
temp=myPermutation(X1,X2,n1,n2,B=100)
tempMy[i]=temp$my
tempChen[i]=temp$chen
tempSri[i] <- temp$sri
}
outMy=c(outMy,sum(tempMy<0.05)/length(tempMy))
outChen=c(outChen,sum(tempChen<0.05)/length(tempChen))
outSri <- c(outSri,sum(tempSri<0.05)/length(tempSri))
}
list(my=outMy,chen=outChen,sri=outSri)
}
myPlot=function(uio){
cc=seq(0,5,1)
temp1=data.frame(h=cc,Power=uio$my,Method="New")
temp2=data.frame(h=cc,Power=uio$chen,Method="CQ")
temp3=data.frame(h=cc,Power=uio$sri,Method="SD")
myD=rbind(temp1,temp2,temp3)
ggplot(data=myD,aes(x=h,y=Power,color=Method,linetype=Method))+
geom_line()+
xlab("SNR")
}
p=150
n1=45
n2=50
r=3
beta=0.5
jjj1=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig1.jpeg",width=300,height=300)
myPlot(jjj1)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig2.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig3.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=3, ",beta,"=2")))+theme_linedraw()
dev.off()
p=150
n1=45
n2=50
r=0
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig4.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=45, ",n[2],"=50, p=150, r=0")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=0.5
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig5.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=0.5")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=1
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
jpeg("fig6.jpeg",width=300,height=300)
myPlot(jjj2)+ggtitle(expression(paste(n[1],"=55, ",n[2],"=60, p=250, r=3, ",beta,"=1")))+theme_linedraw()
dev.off()
p=250
n1=55
n2=60
r=3
beta=2
jjj2=myMainSimulation(p=p,n1=n1,n2=n2,r=r,beta=beta)
