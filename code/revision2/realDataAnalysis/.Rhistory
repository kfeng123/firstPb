str(X2)
ljwStat(X1,X2,n1,n2)
maTest(X1,X2,n1,n2)
r
r=1
maTest(X1,X2,n1,n2r=1)
maTest(X1,X2,n1,n2,r=1)
?`[`
("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
myPvalue
maTest(X1,X2,n1,n2,1)
maTest(X1,X2,n1,n2,r=1)
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
maTest(X1,X2,n1,n2,r=1)
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
maTest(X1,X2,n1,n2,r=1)
myPvalue
myEigen
myEigen[1:10]
myEigen$values[1:10]
ttt <- rnorm(100)
ecdf(ttt)
ecdf(ttt)(10)
vector
?vector
?as.vector
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2)
fastPvalue <- maPvalue(X1,X2,n1,n2)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
r <- estR
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2)
fastPvalue <- maPvalue(X1,X2,n1,n2)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
S1 <- colVars(X1)
S2 <- colVars(X2)
S <- ((n1 - 1) * S1 + (n2 - 1) * S2) / (n1 + n2 - 2)
dS <- diag(S)
str(dS)
R <- cov2cor(S)
diag(S)
diag(S)==0
S
diag(S)
S
S[1:10,1:10]
S
str(S)
X1
str(X1)
colVars(X1)
str(colVars(X1))
?colVars
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
r <- estR
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2)
fastPvalue <- maPvalue(X1,X2,n1,n2)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
r
1:r
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2,r=estR)
fastPvalue <- maPvalue(X1,X2,n1,n2,r=estR)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
temp <- list(myPvalue,chiPvalue,fastPvalue,cqPvalue,sdPvalue,ljwPvalue)
temp
unlist(temp)
cqPvalue
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2,r=estR)
fastPvalue <- maPvalue(X1,X2,n1,n2,r=estR)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
temp <- list(myPvalue,chiPvalue,fastPvalue,cqPvalue,sdPvalue,ljwPvalue)
unlist(temp)
X1
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2,r=estR)
fastPvalue <- maPvalue(X1,X2,n1,n2,r=estR)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
ljwPvalue
temp <- list(myPvalue,chiPvalue,fastPvalue,cqPvalue,sdPvalue,ljwPvalue)
unlist(temp)
set.seed(1)
source("../stat.R")
data1=read.csv("myData.csv")
date=read.csv("myDate.csv",stringsAsFactors = FALSE)
data2=data1[2:nrow(data1),]/data1[1:(nrow(data1)-1),]
data2=rbind(1,data2)
D=data2
D=log(data2)
theMissing=colMeans(is.na(D))
D=D[,theMissing==0]
theWeekDay=format(as.Date(date[,1]),"%u")
X1=D[theWeekDay==1,]
X2=D[theWeekDay!=1,]
X1=as.matrix(X1)
X2=as.matrix(X2)
p=ncol(X1)
n1=nrow(X1)
n2=nrow(X2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
JJJ <- tmp$studentStat
myPvalue <- pchisq(JJJ*sqrt(2*(p-estR))+p-estR,df=p-estR,lower.tail=FALSE)
chiPvalue <- myChiPvalue(X1,X2,n1,n2,r=estR)
fastPvalue <- maPvalue(X1,X2,n1,n2,r=estR)
cqPvalue <- pnorm(ChenQin.test(X1,X2)$ChQ,lower.tail = FALSE)
sdPvalue <- pnorm(sdStat(X1,X2,n1,n2)$stat,lower.tail=FALSE)
ljwPvalue <- ljwPvalue(X1,X2,n1,n2)
temp <- list(myPvalue,chiPvalue,fastPvalue,cqPvalue,sdPvalue,ljwPvalue)
unlist(temp)
myEigen$values[1]/sum(myEigen$values)
library(ggplot2)
chenStat=function(X1,X2,n1,n2){
T1=sum(colMeans(X1)^2)*n1/(n1-1)-sum(X1^2)/n1/(n1-1)
T2=sum(colMeans(X2)^2)*n2/(n2-1)-sum(X2^2)/n2/(n2-1)
T3=sum(colMeans(X1)*colMeans(X2))
return(T1+T2-2*T3)
}
myStat=function(X1,X2,n1,n2,rmax=10){
S=((n1-1)*var(X1)+(n2-1)*var(X2))/(n1+n2-2)
myEigen=eigen(S,symmetric = TRUE)
theTemp=myEigen$values[1:(n1+n2-3)]/myEigen$values[2:(n1+n2-2)]
myRhat=which.max(theTemp[1:rmax])
myTildeV=myEigen$vectors[,-(1:myRhat)]
# variance estimator
varEstimator1=mean(myEigen$values[(myRhat+1):p])
varEstimator2=mean(myEigen$values[(2*myRhat+1):(p-2*myRhat)])
return(list(stat=chenStat(X1%*%myTildeV,X2%*%myTildeV,n1,n2),
varEstimator1=varEstimator1,varEstimator2=varEstimator2))
}
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp)
))
}
myPermutation(X1,X2,n1,n2,B=1000)
B
library(ggplot2)
chenStat=function(X1,X2,n1,n2){
T1=sum(colMeans(X1)^2)*n1/(n1-1)-sum(X1^2)/n1/(n1-1)
T2=sum(colMeans(X2)^2)*n2/(n2-1)-sum(X2^2)/n2/(n2-1)
T3=sum(colMeans(X1)*colMeans(X2))
return(T1+T2-2*T3)
}
myStat=function(X1,X2,n1,n2,rmax=10){
S=((n1-1)*var(X1)+(n2-1)*var(X2))/(n1+n2-2)
myEigen=eigen(S,symmetric = TRUE)
theTemp=myEigen$values[1:(n1+n2-3)]/myEigen$values[2:(n1+n2-2)]
myRhat=which.max(theTemp[1:rmax])
myTildeV=myEigen$vectors[,-(1:myRhat)]
# variance estimator
varEstimator1=mean(myEigen$values[(myRhat+1):p])
varEstimator2=mean(myEigen$values[(2*myRhat+1):(p-2*myRhat)])
return(list(stat=chenStat(X1%*%myTildeV,X2%*%myTildeV,n1,n2),
varEstimator1=varEstimator1,varEstimator2=varEstimator2))
}
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp)
))
}
myPermutation(X1,X2,n1,n2,B=10)
library(ggplot2)
chenStat=function(X1,X2,n1,n2){
T1=sum(colMeans(X1)^2)*n1/(n1-1)-sum(X1^2)/n1/(n1-1)
T2=sum(colMeans(X2)^2)*n2/(n2-1)-sum(X2^2)/n2/(n2-1)
T3=sum(colMeans(X1)*colMeans(X2))
return(T1+T2-2*T3)
}
myStat=function(X1,X2,n1,n2,rmax=10){
S=((n1-1)*var(X1)+(n2-1)*var(X2))/(n1+n2-2)
myEigen=eigen(S,symmetric = TRUE)
theTemp=myEigen$values[1:(n1+n2-3)]/myEigen$values[2:(n1+n2-2)]
myRhat=which.max(theTemp[1:rmax])
myTildeV=myEigen$vectors[,-(1:myRhat)]
# variance estimator
varEstimator1=mean(myEigen$values[(myRhat+1):p])
varEstimator2=mean(myEigen$values[(2*myRhat+1):(p-2*myRhat)])
return(list(stat=chenStat(X1%*%myTildeV,X2%*%myTildeV,n1,n2),
varEstimator1=varEstimator1,varEstimator2=varEstimator2))
}
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp)
))
}
myPermutation(X1,X2,n1,n2,B=100)
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
rmax=10
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
B=1000
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
B
i
library(ggplot2)
chenStat=function(X1,X2,n1,n2){
T1=sum(colMeans(X1)^2)*n1/(n1-1)-sum(X1^2)/n1/(n1-1)
T2=sum(colMeans(X2)^2)*n2/(n2-1)-sum(X2^2)/n2/(n2-1)
T3=sum(colMeans(X1)*colMeans(X2))
return(T1+T2-2*T3)
}
myStat=function(X1,X2,n1,n2,rmax=10){
S=((n1-1)*var(X1)+(n2-1)*var(X2))/(n1+n2-2)
myEigen=eigen(S,symmetric = TRUE)
theTemp=myEigen$values[1:(n1+n2-3)]/myEigen$values[2:(n1+n2-2)]
myRhat=which.max(theTemp[1:rmax])
myTildeV=myEigen$vectors[,-(1:myRhat)]
# variance estimator
varEstimator1=mean(myEigen$values[(myRhat+1):p])
varEstimator2=mean(myEigen$values[(2*myRhat+1):(p-2*myRhat)])
return(list(stat=chenStat(X1%*%myTildeV,X2%*%myTildeV,n1,n2),
varEstimator1=varEstimator1,varEstimator2=varEstimator2))
}
# do permutation
myPermutation = function(X1, X2, n1, n2, rmax = 10, B) {
chen = chenStat(X1, X2, n1, n2)
my = myStat(X1, X2, n1, n2, rmax)$stat
chenTemp = NULL
myTemp = NULL
for (i in 1:B) {
myOrder = sample(n1 + n2, size = n1 + n2, replace = FALSE)
tempX1 = rbind(X1,X2)[myOrder[1:n1], ]
tempX2 = rbind(X1,X2)[myOrder[(n1+1):(n1+n2)], ]
chenTemp[i] = chenStat(tempX1, tempX2, n1, n2)
myTemp[i] = myStat(tempX1, tempX2, n1, n2)$stat
}
return(list(
my = sum(myTemp > my) / length(myTemp),
chen = sum(chenTemp > chen) / length(chenTemp)
))
}
myPermutation(X1,X2,n1,n2,B=1000)
