for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=50){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew3Dis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
ifR <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
# if r is coorected estimated
ifR[i] <- (estR==r)
# NEW3
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
myNew3Dis[i] <- tmp$studentStat
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=estR, myEigen=myEigen)
# fast
# fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
# CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
# SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
# ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
#fastLevel <- mean(fastDis)
# CQ
#CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
#SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
#ljwLevel <- mean(ljwDis)
list(
New3=myNew3Level,
chi=chiLevel,
ifR=mean(ifR)*100
#fast=fastLevel,
#CQ=CQLevel,
#SD=SDLevel,
#ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=50){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew3Dis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
ifR <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
# if r is coorected estimated
ifR[i] <- (estR==r)
# NEW3
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
myNew3Dis[i] <- tmp$studentStat
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=estR, myEigen=myEigen)
# fast
# fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
# CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
# SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
# ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
#fastLevel <- mean(fastDis)
# CQ
#CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
#SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
#ljwLevel <- mean(ljwDis)
list(
New3=myNew3Level,
chi=chiLevel,
ifR=mean(ifR)*100
#fast=fastLevel,
#CQ=CQLevel,
#SD=SDLevel,
#ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=50){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew3Dis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
ifR <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
# if r is coorected estimated
ifR[i] <- (estR==r)
# NEW3
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
myNew3Dis[i] <- tmp$studentStat
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=estR, myEigen=myEigen)
# fast
# fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
# CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
# SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
# ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
#fastLevel <- mean(fastDis)
# CQ
#CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
#SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
#ljwLevel <- mean(ljwDis)
list(
New3=myNew3Level,
chi=chiLevel,
ifR=mean(ifR)*100
#fast=fastLevel,
#CQ=CQLevel,
#SD=SDLevel,
#ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=2000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew3Dis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
ifR <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# estimate r
estR <- which.max(myEigen$values[1:50]/myEigen$values[2:51])
# if r is coorected estimated
ifR[i] <- (estR==r)
# NEW3
tmp <- myStatFinal2(X1, X2, n1, n2, r=estR, myEigen=myEigen)
myNew3Dis[i] <- tmp$studentStat
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=estR, myEigen=myEigen)
# fast
# fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
# CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
# SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
# ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
#fastLevel <- mean(fastDis)
# CQ
#CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
#SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
#ljwLevel <- mean(ljwDis)
list(
New3=myNew3Level,
chi=chiLevel,
ifR=mean(ifR)*100
#fast=fastLevel,
#CQ=CQLevel,
#SD=SDLevel,
#ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
myOuterFun(100,c(200,500,800))
myOuterFun(150,c(200,500,800))
# normal
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"level.csv")
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"level1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"level2.csv")
# Chi-squared
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi.csv")
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi2.csv")
# Student's t
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT.csv")
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT2.csv")
n1
n1=50
n2=50
vecP
vecP=c(200,500,800)
theDistribution ='chiSquared'
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
paste0(n,theDistribution,beta,".csv")
n=50
beta
beta=0.5
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
