# oracle: V known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
setTxtProgressBar(pb,i/B)
}
close(pb)
myLevel=sum(pnorm(myDis,lower.tail=FALSE)<0.05)/B
myNewLevel=sum(pnorm(myNewDis,lower.tail=FALSE)<0.05)/B
oracleLevel=sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
list(myLevel=myLevel,myNewLevel=myNewLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,myNewLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 1)
for(p in c(400))
for(n in c(50)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,
n2=n2,
p=p,
r=r,
beta=beta,
myLevel=level$myLevel,
myNewLevel=level$myNewLevel,
oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
write.csv(Out,"level.csv",row.names = FALSE)
Out
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,B=200){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V[,1:r]
myDis <- NULL
myNewDis <- NULL
oracleDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
X1 <- normalModelSimulator(n1)
X2 <- normalModelSimulator(n2)
myDis[i] <- myStat(X1, X2, n1, n2, r=r)$studentStat
myNewDis[i] <- myStat2(X1, X2, n1, n2, r=r)$studentStat
# oracle: V known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
setTxtProgressBar(pb,i/B)
}
close(pb)
myLevel=sum(pnorm(myDis,lower.tail=FALSE)<0.05)/B
myNewLevel=sum(pnorm(myNewDis,lower.tail=FALSE)<0.05)/B
oracleLevel=sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
list(myLevel=myLevel,myNewLevel=myNewLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,myNewLevel=0,oracleLevel=0)
for(beta in c(0.5))
for(r in 2)
for(p in c(400))
for(n in c(50)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,
n2=n2,
p=p,
r=r,
beta=beta,
myLevel=level$myLevel,
myNewLevel=level$myNewLevel,
oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
row.names(Out)=NULL
write.csv(Out,"level.csv",row.names = FALSE)
Out
library(highD2pop)
library(help="highD2pop")
?ChenQin.test
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V[,1:r]
X1 <- normalModelSimulator(n1)
X2 <- normalModelSimulator(n2)
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r)
myChiTest(X1, X2, n1, n2, r=r)
source("./stat.R")
myChiTest(X1, X2, n1, n2, r=r)
chiDis <- NULL
for(i in 1:B){
# data generation
X1 <- normalModelSimulator(n1)
X2 <- normalModelSimulator(n2)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r)
# CQ
CQDis[i] <- chenStat(X1, X2, n1, n2)$stat
setTxtProgressBar(pb,i/B)
}
B=100
for( i in 1:B){chiDis[i] <- myChiTest(X1,X2,n1,n2,r=r)}
mian(chiDis[i])
mean(chiDis[i])
chiDis[i]
fastDis <- NULL
for( i in 1:B){fastDis[i] <- maTest(X1,X2,n1,n2,r=r)}
warnings()
source("./stat.R")
for( i in 1:B){fastDis[i] <- maTest(X1,X2,n1,n2,r=r)}
warnings()
source('~/firstPb/code/revision1/testLevel.R', echo=TRUE)
S1 <- var(X1)
S2 <- var(X2)
S <- ((n1 - 1) * S1 + (n2 - 1) * S2) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
p <- ncol(X1)
TFast <- sum((colMeans(X1)-colMeans(X2))^2)*(n1*n2/(n1+n2))/p-(myEigen$values[-(1:r)])/p
TFast
sum((colMeans(X1)-colMeans(X2))^2)
source("./stat.R")
TFast <- sum((colMeans(X1)-colMeans(X2))^2)*(n1*n2/(n1+n2))/p-(myEigen$values[-(1:r)])/p
for( i in 1:B){fastDis[i] <- maTest(X1,X2,n1,n2,r=r)}
fastDis
fastDis
quantile(fastDis,0.95)
1>quantile(fastDis,0.95)
as.numeric(1>quantile(fastDis,0.95))
as.numeric(-1>quantile(fastDis,0.95))
ChenQin.test(X,Y)
ChenQin.test(X1,X2)
source("./stat.R")
library(highD2pop)
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,B=2000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- normalModelSimulator(n1)
X2 <- normalModelSimulator(n2)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
# NEW2
myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
# ORACLE
oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
list(New1=myNew1Level,
New2=myNew2Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel
)
}
a<- simulateLevel(20,20,100,2,1,B=200)
a
as.vector(a)
cbind(a)
a<- simulateLevel(50,50,100,2,1,B=200)
cbind(a)
debugSource('~/firstPb/code/revision1/testLevel.R', echo=TRUE)
debugSource('~/firstPb/code/revision1/testLevel.R', echo=TRUE)
debugSource('~/firstPb/code/revision1/testLevel.R', echo=TRUE)
qqnorm(myNew2Dis)
qqnorm(myNew1Dis)
abline(a=0,b=1)
qqnorm(myNew2Dis)
abline(a=0,b=1)
myNew2Level
debugSource('~/firstPb/code/revision1/testLevel.R', echo=TRUE)
myNew2Level
a<-simulateLevel(50,50,100,2,beta=2,B=200)
a
rbind(a)
cbind(a)
a<- simulateLevel(50,50,100,2,1,B=200)
cbind(a)
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=2000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
list(New1=myNew1Level,
New2=myNew2Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel
)
}
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=2000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
list(New1=myNew1Level,
New2=myNew2Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel
)
}
# normal
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"level1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"level2.csv")
# Chi-squared
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi.csv")
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "chiSquared")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelChi2.csv")
# Student's t
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT.csv")
Out=NULL
for(beta in c(1))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT1.csv")
Out=NULL
for(beta in c(2))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(60)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta, theDistribution = "t")
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,"levelT2.csv")
a<- read.csv("level.csv")
a
b<- read.csv("level1.csv")
c<- read.csv("level2.csv")
a<- read.csv("level.csv")
b<- read.csv("level1.csv")
c<- read.csv("level2.csv")
a1<- read.csv("levelChi.csv",row.names = FALSE)
b1<- read.csv("levelChi1.csv",row.names = FALSE)
c1<- read.csv("levelChi2.csv",row.names=FALSE)
a2<- read.csv("levelT.csv",row.names=FALSE)
b2<- read.csv("levelT1.csv",row.names=FALSE)
c2<- read.csv("levelT2.csv",row.names=FALSE)
?read.csv
a<- read.csv("level.csv")
b<- read.csv("level1.csv")
c<- read.csv("level2.csv")
a1<- read.csv("levelChi.csv")
a1<- a1[,-1]
b1<- read.csv("levelChi1.csv")
b1<- b1[,-1]
c1<- read.csv("levelChi2.csv")
c1<- c1[,-1]
a2<- read.csv("levelT.csv")
a2<- a2[,-1]
b2<- read.csv("levelT1.csv")
b2<- b2[,-1]
c2<- read.csv("levelT2.csv")
c2<- c2[,-1]
a
b
c
rbind(a,b,c)
temp1 <- rbind(a,b,c)
temp2 <- rbind(a1,b1,c1)
temp3 <- rbind(a2,b2,c2)
temp <- cbind(temp1,temp2,temp3)
temp
xtable(temp)
xtable(temp,digits = 3)
xtable(temp,digits = 3)
?xtable
