#########################################################################
a<-read.csv("3p50.csv")
b<-read.csv("3p75.csv")
c<-read.csv("3p100.csv")
tmp<-merge(a,b,by.x="SNR",by.y="SNR")
tmp<-merge(tmp,c,by.x="SNR",by.y="SNR")
library(xtable)
zzz<-xtable(tmp,digits=3)
print(zzz,include.rownames=FALSE)
#########################################################################
##### plot(ecdf(jjj))
#
# TheoryCDF <- function(x){
#     tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
#     exp(-tmp*exp(-x/K))
# }
#
# curve(TheoryCDF,from=-10,to=30,add=TRUE)
source('./dataGen.R', echo = TRUE)
n1 <- 10
n2 <- 100
n3 <- 1000
x[1]=rnorm(n1,0,1/n1)
x[2]=rnorm(n1,0,1/n1)
x[3]=rnorm(n1,0,1/n1)
x <- null
x[1]=rnorm(n1,0,1/n1)
x <- NULL
x[1]=rnorm(n1,0,1/n1)
x <- []
x <- 1
x[1]=rnorm(n1,0,1/n1)
x <- vector()
x[1]=rnorm(n1,0,1/n1)
x <- vector(3)
x <- rep(0,3)
x[1]=rnorm(n1,0,1/n1)
x <- rep(0,3)
x[1]=rnorm(1,0,1/n1)
x[2]=rnorm(1,0,1/n2)
x[3]=rnorm(1,0,1/n3)
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
f <- function()
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 2:3)for(j in 1:(i-1)){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
list(a,b)
}
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 2:3)for(j in 1:(i-1)){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
list(a,b)
}
[a,b]
c(a,b)
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
ddd
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 1000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 100
n[2] <- 100
n[3] <- 100
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 100
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
f <- function(){
n<- NULL
n[1] <- 10
n[2] <- 100
n[3] <- 100000
x <- rep(0,3)
x[1]=rnorm(1,0,1/n[1])
x[2]=rnorm(1,0,1/n[2])
x[3]=rnorm(1,0,1/n[3])
a <- 0
for(i in 2:3)for(j in 1:(i-1)){
a<- a+n[i]*n[j]/(n[i]+n[j])*(x[i]-x[j])^2
}
b <- 0
for(i in 1:3){
b<- b+n[i]*x[i]^2
}
b <- b-sum(n)*(sum(n*x)/sum(n))^2
c(a,b)
}
ccc<-NULL
ddd<-NULL
for(i in 1:1000){
tmp<-f()
ccc<-c(ccc,tmp[1])
ddd<-c(ddd,tmp[2])
}
plot(ccc,ddd)
Sys.time()
a<-Sys.time()
as.date(a)
as.Date(a)
a<-as.Date(a)
b<-as.Date("2015-12-01")
a-b
dir()
myData <- read.csv("fenqu.csv")
str(myData)
myData <- read.csv("fenqu.csv",stringsAsFactors = FALSE)
head(myData)
myData[,4]
myData[,4] <- rep(0,75)
myData[,4]
str(myData)
myData[,10]
sapply(X=myData[.10],FUN=myFunction)
myFunction <- function(x){
if(x>2.467){
return(1)
}
if(x>1.528){
return(2)
}
if(x>0.933){
return(3)
}
return(4)
}
sapply(X=myData[.10],FUN=myFunction)
sapply(X=myData[,10],FUN=myFunction)
mean(4.222,3.515,5.721)
tmp<- (myData[,10]+myData[,11]+myData[,12])/3
tmp
myFunction <- function(x){
if(x>2.466){
return(1)
}
if(x>1.527){
return(2)
}
if(x>0.932){
return(3)
}
return(4)
}
sapply(tmp,FUN=myFunction)
tmp2 <- sapply(tmp,FUN=myFunction)
myData[,4] <- tmp2
head(myData)
write.csv(myData,"fenqu.csv")
?as.Date
a<-as.date("20071010")
a<-as.Date("20071010")
a<-as.Date("20071010","%Y%m%d")
a
c(NULL,a)
typeof(a)
class(a)
?Date
str(a)
?as.Date
b<-""
b
c(b,a)
as.Date(c(b,a))
a+1
a
as.Date(c(NULL,a))
c(NULL,a)
as.Date(13796,origin="1904-01-01")
a
as.Date("")
?vector
vector("Date")
c(NULL,a)
c(NULL,a)
b<-NULL
class(b)<- "Date"
c(NULL,a)
b<-c(NULL,a)
b
class(b)<- "Date"
b
a<-1
clear
a<-c(1,2,3)
1%*%a
1%in%a
a<-c(1,2,3)
1%in%a
2%in%a
4%in%a
?globalenv
?global
?par
options("device")
?options
?readline
a<-readline()
a
a<-readline()
a
?print
?printf
?fprint
cat("a")
?scan
scan()
library(ggplot2)
?xlim
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
xlim(15, 20)
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
xlim(20, 15)
?read.csv
read.csv()
read.csv
library("pryr")
install.packages("pryr")
library("pryr")
otype
?is
?ftype
ftype
?print.factor
print.factor
a=1
ftype(a)
ftype
?substitute
t
ftype(t)
f
?f
myF <- function(){}
ftype(myF)
?methods(mean)
methods(mean)
methods(means)
a <-function()UseMethod("haha")
haha.default<- function(a)a+1
haha.Date <- function (a)a+1
b<- 1
a(a)
a(b)
a(b)
a(1)
mean()
mean
a <-function(x)UseMethod("haha")
a(1)
a(Sys.time())
Sys.time()
Sys.time()
Sys.time()
a(Sys.time())
methods(a)
methods(haha)
methods(mean)
?methods
methods(class="Date")
?class
?class<-
?str
?structure
structure(mean)
structure(b)
class(b) <- 100
structure(b)
c<- structure(b, class="haha")
attributes(b)
attr(b)
attr(b,class)
attr(b,"class")
attr(b,"class")<-"200"
attributes(b)<list(class="3000")
attributes(b)<-list(class="3000")
class(b) <- c("1","2","3")
inherits(b,"1")
inherits(b,"2")
inherits(b,"4")
?otype
?UseMethod
a
a<-function(x)UseMethod("t")
a.test
a(data.frame())
data.frame()
?t.test
a(1:10,2:11)
a(1:10)
b
a
a.numeric<-function(x)"numeric"
a.data.frame<-function(x)"data.frame"
a<- function(x)SuseMethod("a")
a.1<-function(x)"1"
a.2<-function(x)"2"
temp<-1
class(temp)<-1
temp
attribute(temp)
attributes(temp)
structure(temp)
a(temp)
a<-function(x)UseMethod("a")
a(temp)
class(temp)<-c(1,2)
a(temp)
class(temp)<-c(2)
a(temp)
class(temp)<-c(2,1)
a(temp)
class(temp)<-c(1,2)
a(temp)
?NextMethod
setwd("~/firstPb/code/revision1")
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=2000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
list(New1=myNew1Level,
New2=myNew2Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel
)
}
# normal
Out=NULL
for(beta in c(0.5))
for(r in 1)
for(p in c(200,400,600,800))
for(n in c(120)){
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
dir("level120/")
dir()
dir("level120")
?directed_graph
?dir
write.csv(r,"level120/haha")
