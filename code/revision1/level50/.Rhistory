myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=1000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
myNew3Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW3
myNew3Dis[i] <- myStatFinal(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
list(New1=myNew1Level,
New2=myNew2Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
a<- read.csv("level0.5.csv")
b<- read.csv("level1.csv")
c<- read.csv("level2.csv")
a1<- read.csv("levelChi0.5.csv")
a1<- a1[,-1]
b1<- read.csv("levelChi1.csv")
b1<- b1[,-1]
c1<- read.csv("levelChi2.csv")
c1<- c1[,-1]
a2<- read.csv("levelT0.5.csv")
a2<- a2[,-1]
b2<- read.csv("levelT1.csv")
b2<- b2[,-1]
c2<- read.csv("levelT2.csv")
c2<- c2[,-1]
temp1 <- rbind(a,b,c)
temp2 <- rbind(a1,b1,c1)
temp3 <- rbind(a2,b2,c2)
temp <- cbind(temp1,temp2,temp3)
xtable(temp,digits=3,)
dir()
a<- read.csv("50level0.5.csv")
b<- read.csv("50level1.csv")
c<- read.csv("50level2.csv")
a1<- read.csv("50levelChi0.5.csv")
a1<- a1[,-1]
b1<- read.csv("50levelChi1.csv")
b1<- b1[,-1]
c1<- read.csv("50levelChi2.csv")
c1<- c1[,-1]
a2<- read.csv("50levelT0.5.csv")
a2<- a2[,-1]
b2<- read.csv("50levelT1.csv")
b2<- b2[,-1]
c2<- read.csv("50levelT2.csv")
c2<- c2[,-1]
temp1 <- rbind(a,b,c)
temp2 <- rbind(a1,b1,c1)
temp3 <- rbind(a2,b2,c2)
temp <- cbind(temp1,temp2,temp3)
xtable(temp,digits=3,)
a<- read.csv("50normal0.5.csv")
b<- read.csv("50normal1.csv")
c<- read.csv("50normal2.csv")
a1<- read.csv("50chiSquared0.5.csv")
a1<- a1[,-1]
b1<- read.csv("50chiSquared1.csv")
b1<- b1[,-1]
c1<- read.csv("50chiSquared2.csv")
c1<- c1[,-1]
a2<- read.csv("50t0.5.csv")
a2<- a2[,-1]
b2<- read.csv("50t1.csv")
b2<- b2[,-1]
c2<- read.csv("50t2.csv")
c2<- c2[,-1]
temp1 <- rbind(a,b,c)
temp2 <- rbind(a1,b1,c1)
temp3 <- rbind(a2,b2,c2)
temp <- cbind(temp1,temp2,temp3)
xtable(temp,digits=3,)
?ChenQin.test
?diag
a <- matrix(c(1,1,1,1),2)
a
diag(a)
?cor
x=rnorm(100)
dim(x)<-c(50,2)
var(x)
cor(x)
cov2cor(var(x))
?floor
floor(1.2)
?hotelling
install.packages("Hotelling")
library(Hotelling)
?hotel.stat
hotel.stat
hotelling.stat
hotelling.test
methods(hotelling.test)
methods(class = hotelling.test.default)
hotelling.test.default
?hotelling.test
?hotelling
?hotel.stat
?hotelling.test
a
b<- rnorm(10)
dim(b)<- c(5,2)
hotelling.test(a,b)
hotelling.test(a,b)$pvalue
hotelling.test(x=a,y=b)$pvalue
hotelling.stat(a,b)
hotelling.stat(a,b)
a
b
hotelling.stat
hotelling.stat(a,b)$statistic
hotelling.test(a,b)$pval
hotelling.test(a,b)$pval <0.05 +0
0+hotelling.test(a,b)$pval <0.05
0+(hotelling.test(a,b)$pval <0.05 )
(hotelling.test(a,b)$pval <0.05 )+0
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=10){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
myNew3Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW3
myNew3Dis[i] <- myStatFinal(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
ljwLevel <- mean(ljwDis)
list(New1=myNew1Level,
New2=myNew2Level,
New3=myNew3Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel,
SD=SDLevel,
ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
a<- read.csv("50normal0.5.csv")
b<- read.csv("50normal1.csv")
c<- read.csv("50normal2.csv")
a1<- read.csv("50chiSquared0.5.csv")
a1<- a1[,-1]
b1<- read.csv("50chiSquared1.csv")
b1<- b1[,-1]
c1<- read.csv("50chiSquared2.csv")
c1<- c1[,-1]
a2<- read.csv("50t0.5.csv")
a2<- a2[,-1]
b2<- read.csv("50t1.csv")
b2<- b2[,-1]
c2<- read.csv("50t2.csv")
c2<- c2[,-1]
temp1 <- rbind(a,b,c)
temp2 <- rbind(a1,b1,c1)
temp3 <- rbind(a2,b2,c2)
temp <- cbind(temp1,temp2,temp3)
xtable(temp,digits=3,)
xtable(temp,digits=3)
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=1000){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
myNew3Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW3
myNew3Dis[i] <- myStatFinal(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
ljwLevel <- mean(ljwDis)
list(New1=myNew1Level,
New2=myNew2Level,
New3=myNew3Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel,
SD=SDLevel,
ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
source("../stat.R")
library(ggplot2)
library(xtable)
simulateLevel <- function(n1,n2,p,r,beta,theDistribution="normal",B=2){
theEig <- rep(1,p)
if(r!=0){
theEig[1:r] <- rep(p^beta,r)+runif(r,0,1)
}
temp <- newModelGenerator(theEig,theDistribution=theDistribution)
modelSimulator <- temp$modelSimulator
V <- temp$V[,1:r]
myNew1Dis <- NULL
myNew2Dis <- NULL
myNew3Dis <- NULL
oracleDis <- NULL
chiDis <- NULL
fastDis <- NULL
CQDis <- NULL
SDDis <- NULL
ljwDis <- NULL
pb <- txtProgressBar(style=3)
for(i in 1:B){
# data generation
X1 <- modelSimulator(n1)
X2 <- modelSimulator(n2)
# precalculate the eigenvalue decomposition
S <- ((n1 - 1) * var(X1) + (n2 - 1) * var(X2)) / (n1 + n2 - 2)
myEigen <- eigen(S, symmetric = TRUE)
# NEW1
myNew1Dis[i] <- myStat(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW2
myNew2Dis[i] <- myStat2(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# NEW3
myNew3Dis[i] <- myStatFinal(X1, X2, n1, n2, r=r, myEigen=myEigen)$studentStat
# oracle: V and sigma known
temp <- chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)$stat
oracleDis[i] <- n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
# chi
chiDis[i] <- myChiTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# fast
fastDis[i] <- maTest(X1, X2, n1, n2, r=r, myEigen=myEigen)
# CQ
CQDis[i] <- ChenQin.test(X1,X2)$ChQ
# SD
SDDis[i] <- sdStat(X1,X2, n1, n2, S=S)$stat
# LJW
ljwDis[i] <-ljwStat(X1,X2,n1,n2)
setTxtProgressBar(pb,i/B)
}
close(pb)
# NEW1
myNew1Level <- sum(pnorm(myNew1Dis,lower.tail=FALSE)<0.05)/B
#myNew1Level <- sum(pchisq(myNew1Dis*sqrt(2*(p-r))+p,lower.tail=FALSE)<0.05)/B
# NEW2
#myNew2Level <- sum(pnorm(myNew2Dis,lower.tail=FALSE)<0.05)/B
myNew2Level <- sum(pchisq(myNew2Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# NEW3
myNew3Level <- sum(pchisq(myNew3Dis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# ORACLE
#oracleLevel <- sum(pnorm(oracleDis,lower.tail=FALSE)<0.05)/B
oracleLevel <- sum(pchisq(oracleDis*sqrt(2*(p-r))+p-r,df=p-r,lower.tail=FALSE)<0.05)/B
# chi
chiLevel <- mean(chiDis)
# fast
fastLevel <- mean(fastDis)
# CQ
CQLevel <- sum(pnorm(CQDis,lower.tail=FALSE)<0.05)/B
# SD
SDLevel <- sum(pnorm(SDDis,lower.tail=FALSE)<0.05)/B
# LJW
ljwLevel <- mean(ljwDis)
list(New1=myNew1Level,
New2=myNew2Level,
New3=myNew3Level,
oracle=oracleLevel,
chi=chiLevel,
fast=fastLevel,
CQ=CQLevel,
SD=SDLevel,
ljw=ljwLevel
)
}
myOuterFun <- function(n,vecP){
for(theDistribution in c("normal","chiSquared","t")){
for(beta in c(0.5,1,2)){
Out=NULL
for(p in vecP){
r<-2
n1=n
n2=n
level <- simulateLevel(n1,n2,p,r,beta,theDistribution=theDistribution)
level <- cbind(level)
dimnames(level)[[2]] <- p
Out <- cbind(Out,level)
}
write.csv(Out,paste0(n,theDistribution,beta,".csv"))
}
}
}
myOuterFun(50,c(200,500,800))
